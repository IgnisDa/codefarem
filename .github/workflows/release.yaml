name: 'Build and push containers to the Github registry'

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  generate:
    name: 'Generate dockerfile(s)'
    runs-on: 'ubuntu-latest'
    outputs:
      executables: ${{ steps.executables.outputs.executables }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: ./.github/actions/setup-moon
        name: Setup moon

      - uses: ./.github/actions/set-base-commit
        name: Set base commit

      - name: Get projects executables
        id: executables
        run: |
          executables=$(node -e "
            let executables = \`$(cat apps/deployment/src/data/*.json | jq .apps[].EXECUTABLE_NAME -r)\`.split('\n')
            console.log(JSON.stringify(executables))
          ")
          echo "executables=$executables" >> $GITHUB_OUTPUT
          echo "Discovered executables: $executables"

      - uses: ./.github/actions/setup-python
        name: Setup python environment

      - name: Generate project dockerfile(s)
        run: |
          for project in "authenticator" "compilers" "executor" "orchestrator" "website" "admin-backend" "admin-website"
          do
            echo "Generating dockerfile for '$project'..."
            poetry run python apps/deployment/src/docker.py "$project"
          done

      - name: Save generated dockerfile(s)
        uses: actions/upload-artifact@v3
        with:
          name: generated-dockerfile
          path: apps/**/*.generated.Dockerfile
          if-no-files-found: error

  build:
    name: 'Build and push containers'
    needs: generate
    strategy:
      matrix:
        executable: ${{ fromJSON(needs.generate.outputs.executables) }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get docker image name
        id: image_name
        run: |
          image_name="${{ env.REGISTRY }}/${{ github.actor }}/codefarem--${{ matrix.executable }}:latest"
          # lowercase the name
          image_name=$(echo "$image_name" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$image_name" >> $GITHUB_OUTPUT

      - name: Get dockerfile path
        id: dockerfile_path
        env:
          executable: ${{ matrix.executable }}
        run: |
          for file in apps/deployment/src/data/*.json; do
            if [[ $(cat "$file" | jq '.apps[].EXECUTABLE_NAME' -r) == *"$executable"* ]]; then
              dockerfile_path=$(envsubst < "$file" | jq '.dockerfile_path' -r)
              break
            fi
          done
          # throw error if no dockerfile path was found
          if [[ -z "$dockerfile_path" ]]; then
            echo "No dockerfile path found for executable '$executable'"
            exit 1
          fi
          echo "dockerfile_path=$dockerfile_path" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download generated dockerfile(s)
        uses: actions/download-artifact@v3
        with:
          name: generated-dockerfile
          # https://github.com/actions/upload-artifact#upload-using-multiple-paths-and-exclusions
          path: apps

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ steps.dockerfile_path.outputs.dockerfile_path }}
          push: true
          tags: ${{ steps.image_name.outputs.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
